// unitless function to convert px to em
@function em($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return $pixels / $context * 1em;
}

// breakpoint mixin
@mixin breakpoint($mq01: 0, $mq2: false, $maxmin: max-width) {
  @if $mq2 == false {
    @media ($maxmin: $mq01) {
      @content;
    }
  }
  @else {
    @media (min-width: $mq01) and (max-width: $mq2) {
      @content;
    }
  }
}

// responsive font size mixin
@mixin font-size-map($font-size-map) {
  @each $breakpoint, $font-size in $font-size-map {
    @if $breakpoint == null {
      font-size: em($font-size);
    } @else {
      @include breakpoint($breakpoint) {
        font-size: em($font-size);
      }
    }
  }
}

// breakpoint variables
$lg: 2000px;
$md: 1400px;
$sm: 750px;
$xs: 550px;

// body font size
$browser-context: 16;

// typography scale
$body-font-size: (null: 20, $md: 18, $sm: 17, $xs: 16);
$h1-font-size: (null: 60);
$h2-font-size: (null: 40px);
$h3-font-size: (null: 27px);
$h4-font-size: (null: 18px);
$h5-font-size: (null: 12px);

html {
  line-height: 1.2;
  font-family: 'freight-text-pro', serif;
  font-weight: 300;
  @include font-size-map($body-font-size);
}

p {
  @include font-size-map($body-font-size);
}

h1 {
  @include font-size-map($h1-font-size);
}

h2 {
  @include font-size-map($h2-font-size);
}

h3 {
  @include font-size-map($h3-font-size);
}

h4 {
  @include font-size-map($h4-font-size);
}

h5 {
  @include font-size-map($h5-font-size);
}